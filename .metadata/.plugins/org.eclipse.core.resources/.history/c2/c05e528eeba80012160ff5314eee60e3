package com.example.prototypedesktop;

import org.alljoyn.bus.BusAttachment;
import org.alljoyn.bus.Mutable;
import org.alljoyn.bus.SessionListener;
import org.alljoyn.bus.SessionOpts;
import org.alljoyn.bus.Status;

import com.example.bus.MainService;

public class DesktopService {
	
	private static final String PACKAGE = "com.example.firstapp.prototype";
	private int mUseSessionId;
	private MyBusObject myBusObject;

	public void init(){
        /* Create a bus connection and connect to the bus */
        BusAttachment bus = new BusAttachment(PACKAGE);
        Status status = bus.connect();
        if (Status.OK != status) {
            System.out.println("BusAttachment.connect() failed with " + status.toString());
            return;
        }

        short contactPort = MainService.CONTACT_PORT;
        SessionOpts sessionOpts = new SessionOpts(SessionOpts.TRAFFIC_MESSAGES, true, SessionOpts.PROXIMITY_ANY, SessionOpts.TRANSPORT_ANY);
        Mutable.IntegerValue sessionId = new Mutable.IntegerValue();
        
        Status joinStatus = bus.joinSession(PACKAGE + ".a", contactPort, sessionId, sessionOpts, new SessionListener() {
            /**
             * This method is called when the last remote participant in the 
             * chat session leaves for some reason and we no longer have anyone
             * to chat with.
             *
             * In the class documentation for the BusListener note that it is a
             * requirement for this method to be multithread safe.  This is
             * accomplished by the use of a monitor on the ChatApplication as
             * exemplified by the synchronized attribute of the removeFoundChannel
             * method there.
             */
            public void sessionLost(int sessionId) {
            }
        });
        
        if (joinStatus == Status.OK) {
        	mUseSessionId = sessionId.value;
        }    
        myBusObject = new MyBusObject();
        bus.registerBusObject(myBusObject, "/")
	}

}
