package com.example.firstapp;

import java.util.ArrayList;
import java.util.List;


import android.app.Application;
import android.content.ComponentName;
import android.content.Intent;
import android.util.Log;

public class MainApplication extends Application implements Observable{
	private static final String TAG = "MainApplication";
	public static final String APPLICATION_QUIT_EVENT = "APPLICATION_QUIT_EVENT";
	public static final String USE_JOIN_CHANNEL_EVENT = "USE_JOIN_CHANNEL_EVENT";
	public static final String USE_LEAVE_CHANNEL_EVENT = "USE_LEAVE_CHANNEL_EVENT";
	public static final String HOST_INIT_CHANNEL_EVENT = "HOST_INIT_CHANNEL_EVENT";
	public static final String HOST_START_CHANNEL_EVENT = "HOST_START_CHANNEL_EVENT";
	public static final String HOST_STOP_CHANNEL_EVENT = "HOST_STOP_CHANNEL_EVENT";
	public static final String OUTBOUND_CHANGED_EVENT = "OUTBOUND_CHANGED_EVENT";
	public static String PACKAGE_NAME;
	private ComponentName mRunningService;
	private MainService mService;
	private String hostChannelName;
	private String channelName;
	private Point point;

	   static {
	        System.loadLibrary("alljoyn_java");
	    }
	
	public void onCreate() {
		Log.i("MainApp", "onCreate");
        PACKAGE_NAME = getApplicationContext().getPackageName();
        Intent intent = new Intent(this, MainActivity.class);
        mRunningService = startService(intent);
        if (mRunningService == null) {
            Log.i("", "onCreate(): failed to startService()");
        }
        mService = new ServiceWrapper(this);
        mService.init();
	}
	
    public void quit() {
		mRunningService = null;
    }
    

	public String getHostChannelName() {
		return hostChannelName;
	}
	
	public void setHostChannelName(String name){
		this.hostChannelName = name; 
	}
	public String getChannelName() {
		return channelName;
	}
	
	public void setChannelName(String name){
		this.channelName = name; 
	}

	synchronized public Point getPoint() {
		Point point1 = this.point;
		this.point = null;
		return point1;
	}
	
	synchronized public void setPoint(Point p){
		this.point = p;
		messageStateChanged();
	}

	public synchronized void addObserver(Observer obs) {
        Log.i(TAG, "addObserver(" + obs + ")");
		if (mObservers.indexOf(obs) < 0) {
			mObservers.add(obs);
		}
	}
	
	/**
	 * When an observer wants to unregister to stop receiving change 
	 * notifications, it calls here. 
	 */
	public synchronized void deleteObserver(Observer obs) {
        Log.i(TAG, "deleteObserver(" + obs + ")");
		mObservers.remove(obs);
	}
	

	private void notifyObservers(Object arg) {
        Log.i(TAG, "notifyObservers(" + arg + ")");
        for (Observer obs : mObservers) {
            Log.i(TAG, "notify observer = " + obs);
            obs.update(this, arg);
        }
	}
	private List<Observer> mObservers = new ArrayList<Observer>();
	
	public synchronized void useJoinChannel() {
		notifyObservers(USE_JOIN_CHANNEL_EVENT);
	}
	public synchronized void messageStateChanged() {
		notifyObservers(OUTBOUND_CHANGED_EVENT);
	}
	
	public synchronized void useLeaveChannel() {
		notifyObservers(USE_LEAVE_CHANNEL_EVENT);
	}

	public synchronized void hostInitChannel() {
		notifyObservers(HOST_INIT_CHANNEL_EVENT);
	}

	public synchronized void hostStartChannel() {
		notifyObservers(HOST_START_CHANNEL_EVENT);
	}
	
	public synchronized void hostStopChannel() {
		notifyObservers(HOST_STOP_CHANNEL_EVENT);
	}
	

}
